/**
 * Alpaca API specification generated by orval. Check [orval.config.ts] for more details.
 * Do not edit manually.
 * OpenAPI spec version: 0.1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import type {
  ApiGenerateNoteRequest,
  ApiLoadNotesRequest,
  ApiSaveNoteRequest,
} from "../api_models";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type {
  ApiGenerateNoteResponse,
  ApiLoadNotesResponse,
  ApiSaveNoteResponse,
} from "../api_models";

/**
 * @summary Health Check
 */
export const healthCheckGet = <TData = AxiosResponse<unknown>>(
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.get(`http://localhost:8000/`, options);
};

/**
 * @summary Generate Note
 */
export const generateNoteGenerateNotePost = <
  TData = AxiosResponse<ApiGenerateNoteResponse>,
>(
  apiGenerateNoteRequest: ApiGenerateNoteRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `http://localhost:8000/generate_note`,
    apiGenerateNoteRequest,
    options,
  );
};

/**
 * @summary Save Note
 */
export const saveNoteSaveNotePost = <
  TData = AxiosResponse<ApiSaveNoteResponse>,
>(
  apiSaveNoteRequest: ApiSaveNoteRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `http://localhost:8000/save_note`,
    apiSaveNoteRequest,
    options,
  );
};

/**
 * @summary Load Notes
 */
export const loadNotesLoadNotesPost = <
  TData = AxiosResponse<ApiLoadNotesResponse>,
>(
  apiLoadNotesRequest: ApiLoadNotesRequest,
  options?: AxiosRequestConfig,
): Promise<TData> => {
  return axios.post(
    `http://localhost:8000/load_notes`,
    apiLoadNotesRequest,
    options,
  );
};

export type HealthCheckGetResult = AxiosResponse<unknown>;
export type GenerateNoteGenerateNotePostResult =
  AxiosResponse<ApiGenerateNoteResponse>;
export type SaveNoteSaveNotePostResult = AxiosResponse<ApiSaveNoteResponse>;
export type LoadNotesLoadNotesPostResult = AxiosResponse<ApiLoadNotesResponse>;

export const getGenerateNoteGenerateNotePostResponseMock = (
  overrideResponse: Partial<ApiGenerateNoteResponse> = {},
): ApiGenerateNoteResponse => ({
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  generated_note: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  ...overrideResponse,
});

export const getSaveNoteSaveNotePostResponseMock = (
  overrideResponse: Partial<ApiSaveNoteResponse> = {},
): ApiSaveNoteResponse => ({
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  success: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getLoadNotesLoadNotesPostResponseMock = (
  overrideResponse: Partial<ApiLoadNotesResponse> = {},
): ApiLoadNotesResponse => ({
  error: faker.helpers.arrayElement([
    faker.helpers.arrayElement([faker.word.sample(), null]),
    undefined,
  ]),
  notes: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    date: faker.number.int({ min: undefined, max: undefined }),
    id: faker.word.sample(),
    observations: faker.word.sample(),
    therapist_id: faker.word.sample(),
  })),
  ...overrideResponse,
});

export const getHealthCheckGetMockHandler = () => {
  return http.get("*/", async () => {
    await delay(1000);
    return new HttpResponse(null, {
      status: 200,
      headers: {
        "Content-Type": "application/json",
      },
    });
  });
};

export const getGenerateNoteGenerateNotePostMockHandler = (
  overrideResponse?:
    | ApiGenerateNoteResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiGenerateNoteResponse> | ApiGenerateNoteResponse),
) => {
  return http.post("*/generate_note", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGenerateNoteGenerateNotePostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getSaveNoteSaveNotePostMockHandler = (
  overrideResponse?:
    | ApiSaveNoteResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiSaveNoteResponse> | ApiSaveNoteResponse),
) => {
  return http.post("*/save_note", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getSaveNoteSaveNotePostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};

export const getLoadNotesLoadNotesPostMockHandler = (
  overrideResponse?:
    | ApiLoadNotesResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<ApiLoadNotesResponse> | ApiLoadNotesResponse),
) => {
  return http.post("*/load_notes", async (info) => {
    await delay(1000);
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getLoadNotesLoadNotesPostResponseMock(),
      ),
      {
        status: 200,
        headers: {
          "Content-Type": "application/json",
        },
      },
    );
  });
};
export const getFastAPIMock = () => [
  getHealthCheckGetMockHandler(),
  getGenerateNoteGenerateNotePostMockHandler(),
  getSaveNoteSaveNotePostMockHandler(),
  getLoadNotesLoadNotesPostMockHandler(),
];
